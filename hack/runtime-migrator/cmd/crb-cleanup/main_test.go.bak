package main

import (
	"context"
	"fmt"
	"testing"

	rbacv1 "k8s.io/api/rbac/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/client-go/kubernetes"

	"github.com/stretchr/testify/assert"
	"sigs.k8s.io/controller-runtime/pkg/envtest"
)

func TestSimple(t *testing.T) {
	ctx := context.Background()
	testenv := &envtest.Environment{}
	cfg, err := testenv.Start()
	assert.NoError(t, err)

	// create a client
	client, err := kubernetes.NewForConfig(cfg)
	assert.NoError(t, err)
	crbClient := client.RbacV1().ClusterRoleBindings()

	old, new := generateCRBs(5)

	for _, crb := range append(old, new...) {
		_, err := crbClient.Create(ctx, crb, metav1.CreateOptions{})
		assert.NoError(t, err, "Error creating %q", crb.Name)
	}

	fetcher := NewCRBFetcher(crbClient, "old=true", "new=true")
	cleaner := NewCRBCleaner(crbClient)
	failures := ProcessCRBs(fetcher, cleaner, Config{
		Kubeconfig: "",
		Pretend:    false,
		Verbose:    false,
		Force:      false,
		OldLabel:   "",
		NewLabel:   "",
	})

	assert.Len(t, failures, 0)

	_, err = crbClient.Get(ctx, "admin0", metav1.GetOptions{})
	assert.True(t, errors.IsNotFound(err), "Old CRB wasn't deleted")

	err = testenv.Stop()
	assert.NoError(t, err)
}

func generateCRBs(count int) ([]*rbacv1.ClusterRoleBinding, []*rbacv1.ClusterRoleBinding) {
	old, new := make([]*rbacv1.ClusterRoleBinding, count), make([]*rbacv1.ClusterRoleBinding, count)
	for i := 0; i < count; i++ {
		old[i] = ClusterRoleBinding(fmt.Sprintf("old%2d", i), fmt.Sprintf("user%d@sap.com", i), fmt.Sprintf("role%2d", i), "old", "true")
		new[i] = ClusterRoleBinding(fmt.Sprintf("new%2d", i), fmt.Sprintf("user%d@sap.com", i), fmt.Sprintf("role%2d", i), "new", "true")
	}
	return old, new
}

func ClusterRoleBinding(name, user, role string, labels ...string) *rbacv1.ClusterRoleBinding {
	labelsMap := map[string]string{}
	for i := 0; i < len(labels); i += 2 {
		labelsMap[labels[i]] = labels[i+1]
	}
	return &rbacv1.ClusterRoleBinding{
		ObjectMeta: metav1.ObjectMeta{
			Name:   name,
			Labels: labelsMap,
		},
		Subjects: []rbacv1.Subject{
			{
				Kind: "User",
				Name: user,
			},
		},
		RoleRef: rbacv1.RoleRef{
			APIGroup: "rbac.authorization.k8s.io",
			Kind:     "ClusterRole",
			Name:     role,
		},
	}
}
