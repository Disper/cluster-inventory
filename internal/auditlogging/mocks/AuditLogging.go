// Code generated by mockery v2.36.1. DO NOT EDIT.

package mocks

import (
	context "context"

	client "sigs.k8s.io/controller-runtime/pkg/client"

	mock "github.com/stretchr/testify/mock"

	v1beta1 "github.com/gardener/gardener/pkg/apis/core/v1beta1"
)

// AuditLogging is an autogenerated mock type for the AuditLogging type
type AuditLogging struct {
	mock.Mock
}

// Enable provides a mock function with given fields: ctx, shoot
func (_m *AuditLogging) Enable(ctx context.Context, shoot *v1beta1.Shoot) (bool, error) {
	ret := _m.Called(ctx, shoot)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta1.Shoot) (bool, error)); ok {
		return rf(ctx, shoot)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta1.Shoot) bool); ok {
		r0 = rf(ctx, shoot)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1beta1.Shoot) error); ok {
		r1 = rf(ctx, shoot)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateShootClient provides a mock function with given fields: _a0
func (_m *AuditLogging) UpdateShootClient(_a0 client.Client) {
	_m.Called(_a0)
}

// NewAuditLogging creates a new instance of AuditLogging. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuditLogging(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuditLogging {
	mock := &AuditLogging{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
